/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import controller.Manager;
import demoserverrmi.IServices;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.rmi.registry.LocateRegistry;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.logging.Level;
import java.util.logging.Logger;


import javax.swing.JOptionPane;
import model.Castle;
import model.Doctor;
import model.Archer;
import model.House;
import model.Map;
import model.Villager;


/**
 *
 * @author joca
 */
public class MainWindow extends javax.swing.JFrame implements Runnable {

    private static String host = "192.168.207.211";
    private static Manager mMan = new Manager();
    public static String SelectedImage=new String();
    private static  ImageRepository repo=new ImageRepository();
    private int selectedX = -1;
    private int selectedY = -1;
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        paletPanel1.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mapPanel2 = new view.MapPanel();
        paletPanel1 = new view.PaletPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMapBtn = new javax.swing.JMenuItem();
        loadBtn = new javax.swing.JMenuItem();
        saveBtn = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Mapas");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(new java.awt.Dimension(600, 600));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        mapPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mapPanel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout mapPanel2Layout = new javax.swing.GroupLayout(mapPanel2);
        mapPanel2.setLayout(mapPanel2Layout);
        mapPanel2Layout.setHorizontalGroup(
            mapPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 572, Short.MAX_VALUE)
        );
        mapPanel2Layout.setVerticalGroup(
            mapPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 564, Short.MAX_VALUE)
        );

        paletPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paletPanel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout paletPanel1Layout = new javax.swing.GroupLayout(paletPanel1);
        paletPanel1.setLayout(paletPanel1Layout);
        paletPanel1Layout.setHorizontalGroup(
            paletPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 141, Short.MAX_VALUE)
        );
        paletPanel1Layout.setVerticalGroup(
            paletPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        jMenu1.setText("Map");

        newMapBtn.setText("New map");
        newMapBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMapBtnActionPerformed(evt);
            }
        });
        jMenu1.add(newMapBtn);

        loadBtn.setText("Load map");
        loadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBtnActionPerformed(evt);
            }
        });
        jMenu1.add(loadBtn);

        saveBtn.setText("Save Map");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        jMenu1.add(saveBtn);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mapPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(paletPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(paletPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBtnActionPerformed
        // TODO add your handling code here:
        mMan.loadXMLFile();
        mapPanel2.repaint();
        JOptionPane.showMessageDialog(null, "Mapa cargado correctamente");
    }//GEN-LAST:event_loadBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        // TODO add your handling code here:
        mMan.saveXMLFile();
    }//GEN-LAST:event_saveBtnActionPerformed
    
    @Override
    public void run() {
        
        while(true){
            
           try {
                Registry reg = LocateRegistry.getRegistry(host, 1099);
                IServices proxy = (IServices)reg.lookup("MyServer");

                Map m =proxy.getMapa();
                mMan.setM(m);
                mapPanel2.repaint(); 
                System.out.println("Carga el mapa");

            } catch (Exception ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } 
           try {
                Thread.sleep(250);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
          
    }
    
    private void newMapBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMapBtnActionPerformed
        // TODO add your handling code here:
        //mMan.setM(new Map(20,20));
        
        // hilo cada segundo

        Thread refreshMap = new Thread(this);
        refreshMap.start();
       
        
        
        paletPanel1.setVisible(true);
        
        mapPanel2.repaint();
        
    }//GEN-LAST:event_newMapBtnActionPerformed

    private void paletPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paletPanel1MouseClicked
        // TODO add your handling code here:
        
        Map m=Manager.getM();
         //Obtenemos la posicion del click
        Point p=evt.getPoint();
       int height=this.getMousePosition().x;   
       int width=this.getMousePosition().y;
       System.out.println(height);
       System.out.println(width);
       
        Rectangle imageBounds = new Rectangle(0,0,60, 60);
        if (imageBounds.contains(p)){
            JOptionPane.showMessageDialog(null, "Villager");
            SelectedImage="Villager";
            Toolkit toolkit = Toolkit.getDefaultToolkit();  
            BufferedImage image = repo.getImage("Villager");
            Point hotSpot = new Point(0,0); 
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Pencil");  
            setCursor(cursor);
        }
        Rectangle imageBounds2 = new Rectangle(60,0,60, 60);
        if (imageBounds2.contains(p)){
            JOptionPane.showMessageDialog(null, "House");
            SelectedImage="House";
            Toolkit toolkit = Toolkit.getDefaultToolkit();  
            BufferedImage image = repo.getImage("House");
            Point hotSpot = new Point(0,0); 
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Pencil");  
            setCursor(cursor);
        }
        Rectangle imageBounds3 = new Rectangle(0,60,60, 60);
        if (imageBounds3.contains(p)){
            JOptionPane.showMessageDialog(null, "Arquero");
            SelectedImage="Arquero";
            Toolkit toolkit = Toolkit.getDefaultToolkit();  
            BufferedImage image = repo.getImage("Archer");
            Point hotSpot = new Point(0,0); 
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Pencil");  
            setCursor(cursor);
        }
        Rectangle imageBounds4 = new Rectangle(60,60,60, 60);
        if (imageBounds4.contains(p)){
            JOptionPane.showMessageDialog(null, "Doctor");
            SelectedImage="Doctor";
            Toolkit toolkit = Toolkit.getDefaultToolkit();  
            BufferedImage image = repo.getImage("Doctor");
            Point hotSpot = new Point(0,0); 
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Pencil");  
            setCursor(cursor);
        }
        Rectangle imageBounds5 = new Rectangle(0,120,120, 120);
        if (imageBounds5.contains(p)){
            JOptionPane.showMessageDialog(null, "Castillo");
            SelectedImage="Castillo";
            Toolkit toolkit = Toolkit.getDefaultToolkit();  
            BufferedImage image = repo.getImage("Castle");
            Point hotSpot = new Point(0,0); 
            Cursor cursor = toolkit.createCustomCursor(image, hotSpot, "Pencil");  
            setCursor(cursor);
        }
       System.out.println("Celda Selecionada");

       this.selectedX = -1;
       this.selectedY = -1;
    }//GEN-LAST:event_paletPanel1MouseClicked

    private void mapPanel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mapPanel2MouseClicked
        Map m = Manager.getM();
        int maxW=m.getWi();
        int maxH=m.getHe();
        int cellDimensionW=25;
        int cellDimensionH=28;
        //Obtenemos la posicion del click
        Point p=evt.getPoint();
        int width=p.x;
        int height=p.y;
        
        
        
        
        
        
        int auxX=width/25;
        int auxY=height/14;
        int x=(( auxX )+(auxY))/2;
        int y=((auxY)-(auxX ))/2 ;
        x-=11;
        y+=12;
        
        if (SelectedImage == "" && this.selectedX == -1 && m.getCeldas()[x-1][y-1].getObject() != null){
            this.selectedX = x;
            this.selectedY = y;
                        
            JOptionPane.showMessageDialog(null,"Objeto seleccionado : " +  m.getCeldas()[x-1][y-1].getObject().getNombreObj());
            
                          
        } else if (this.selectedX != -1 && m.getCeldas()[x-1][y-1].isAccess()){
            m.getCeldas()[x-1][y-1].setObject(m.getCeldas()[selectedX - 1][selectedY - 1].getObject());
            mMan.deleteObj(selectedX, selectedY);
            mapPanel2.repaint();
            JOptionPane.showMessageDialog(null,"Cambio de posición");
            this.selectedX = -1;
            this.selectedY = -1;
            
        } else if(SelectedImage != ""){
            this.selectedX = -1;
            this.selectedY = -1;
        }        
        
        if(evt.getButton() == MouseEvent.BUTTON1){
            if(SelectedImage=="Villager"){
                Villager v1 = new Villager();
                v1.setIdObject(1);
                v1.setHeightOcc(1);
                v1.setWidthOcc(1);
                v1.setNombreObj("Villager");
                v1.setTeam('1');
                mMan.addVillager(v1, x+1, y+1);
                mMan.saveXMLFile();
                mapPanel2.repaint();
            }
            else if(SelectedImage=="House"){
                House h1=new House();
                h1.setTeam('1');
                mMan.addHouse(h1,x,y);
                mMan.saveXMLFile();
                mapPanel2.repaint();
            }
            else if(SelectedImage=="Arquero"){
                Archer h1=new Archer();
                h1.setTeam('1');
                mMan.addArcher(h1,x+1,y+1);
                mMan.saveXMLFile();
                mapPanel2.repaint();
            }
            else if(SelectedImage=="Doctor"){
                Doctor h1=new Doctor();
                h1.setTeam('1');
                mMan.addDoctor(h1,x+1,y+1);
                mMan.saveXMLFile();
                mapPanel2.repaint();
            }
            else if(SelectedImage=="Castillo"){
                Castle h1=new Castle();
                h1.setTeam('1');
                mMan.addCastle(h1,x+1,y+1);
                mMan.saveXMLFile();
                mapPanel2.repaint();
            }
            
        }
        else if(evt.getButton() == MouseEvent.BUTTON3){
            mMan.deleteXMLFile(x, y);
            mMan.loadXMLFile();
            mapPanel2.repaint();
        }

        this.SelectedImage = "";
        this.setCursor(null);
    }//GEN-LAST:event_mapPanel2MouseClicked

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        
        
        if (evt.getKeyChar() == KeyEvent.VK_DELETE && this.selectedX != -1){
           
            mMan.deleteObj(selectedX, selectedY);
            mapPanel2.repaint();
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadBtn;
    private view.MapPanel mapPanel2;
    private javax.swing.JMenuItem newMapBtn;
    private view.PaletPanel paletPanel1;
    private javax.swing.JMenuItem saveBtn;
    // End of variables declaration//GEN-END:variables
}
